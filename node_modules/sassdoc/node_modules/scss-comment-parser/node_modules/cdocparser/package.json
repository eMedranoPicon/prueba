{
  "name": "cdocparser",
  "version": "0.13.0",
  "description": "Extract C style comments and extract context from source",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/FWeinb/CDocParser"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test"
  },
  "keywords": [
    "doc",
    "documentation",
    "extract",
    "parse"
  ],
  "author": {
    "name": "Fabrice Weinberg",
    "email": "Fabrice@weinberg.me"
  },
  "contributors": [
    {
      "name": "joshwnj",
      "email": "josh@x-team.com",
      "url": "http://x-team.com"
    }
  ],
  "license": "MIT",
  "devDependencies": {
    "assert": "^1.1.1",
    "mocha": "^2.1.0"
  },
  "dependencies": {
    "escape-string-regexp": "^1.0.2",
    "lodash.assign": "^2.4.1",
    "strip-indent": "^1.0.0"
  },
  "readme": "CDocParser\n---\nCDocParser is a language agnostic C and `///`-Style comments parser that uses block and line comments to make it easier to generate documentation.\n\n\n## Install\n\n```bash\n$ npm install --save cdocparser\n```\n\n\n## Usage\n\nCDocParser consists of two parts the `CommentExtractor` and a `CommentParser`.\n\n\n```js\nvar CDocParser = require('cdocparser');\nvar extractor = new CDocParser.CommentExtractor(/* contextParser */ );\nvar parser = new CDocParser.CommentParser(/* Annotations */);\n\nvar comments = extractor.extract(/* code */);\nvar parsedComments = parser.parse(comments);\n\nconsole.log(parsedComments);\n```\n\n## API\n\n### CommentExtractor\n\nThe ComemntExtractor is used to extract C and `///`-Style comments from source and attach context information to it.\n\n#### `new CommentExtractor(contextParser, [opts])`\n\nCreate a CommentExtractor to extract block comment like:\n\n```\n/**\n *\n *  CDocComment\n *\n */\n```\n\nYou need to pass in a function that is used to generate a `context` object used to specify the context of the comment.\nA context obj:\n\n```js\n{\n  type : 'contextType'\n}\n```\n\nThe `type` attribute is mandatory, you can add as much attributes as you would like.\n\nTo support custom comment formats set `lineCommentStyle` and/or `blockCommentStyle` in the `opts` argument, shown here with default values:\n\n```\nnew CommentExtractor(contextParser, {\n  lineComment: true,\n  blockComment: true,\n  lineCommentStyle: '///',\n  blockCommentStyle: '/**'\n})\n```\n\nThe default regex can be found in index.js (`var defaultDocCommentRegEx = ...`).\n\n#### `#extract(code)`\n\nThis method will return an Array of all comments in the form of\n\n```js\n[\n  {\n    lines: [],\n    type: 'block|line|poster',\n    commentRange: { start : 1, end : 2 }, \n    context: [context object generated by contextParser]\n  }\n]\n```\n\n\n### CommentParser\n\n#### `new CommentParser(annotations, config)`\n\nCreate a new `CommentParser` where `annotations` is an object like:\n```js\n{\n  _: {\n    alias: {\n      'aliasName': 'aRealAnnotation'\n    }\n  },\n\n  aRealAnnotation: {\n    parse : function (annotationLine, info, id) {\n    \n    },\n    default : function(){\n      return 5;\n    }\n  }\n}\n```\n\nThis object is used to provide parser for various types of annotations. It also includes tha ability to include aliases.\n\n#### `#parse ( comments [, id ])`\n\nThis methods takes a comments array provided by `CommentExtractor#extract` and parses all annotations. The resulting\nobject will look like:\n\n```js\n{\n  \"[context.type]\" : [\n    {\n      description : \"[Contains all comment lines without an annotation]\",\n      commentRange : { start : [start], end : [end] },\n      [annotationName] : [resultOfAnnotationParser]\n    }\n  ]\n}\n```\n\n\n### Annotations API \n\nThe annotations object is build up from two different kind of object. A `annotation` object and a\n`alias`. \n\nThe global structure looks like:\n```\n{\n  _ : {\n    [alias object]\n  },\n  [annotation object],\n  [annotation object]\n}\n```\n\n\n### A `annotation` object\n\n#### Overview\n```js\nname : {\n  parse : function(line, info, id){\n\n  },\n\n  autofill : function(comment){\n\n  },\n\n  default : function(comment){\n\n  },\n\n  multiple : true\n}\n```\n\nEach annotation must have a `parse` method, optionally you can have a `default` and `extend` methods. The optional `multiple` key is used to indicate if an annotation can be used multiple times.\n\n#### `parse` method\nThe `parse` method is used to parse the actual `string` after the `@name`. All values returned from that method\nwill be wrapped in an array.\n\n##### Example:\nImplementing a `name` annotation:\n\n```js\n/**\n * @name Fabrice Weinberg \n */\n```\n\n```js\nfunction(line){\n  return {\n    name : line\n  }\n}\n```\n\n#### `default` method \nThe `default` method is used to add a default value.\n\n##### Example:\n```js\nfunction(comment){\n  return [{\n    name : 'Default Name'\n  }]\n}\n```\n> Note: Please keep in mind that you need to wrap values in an Array to align with hand written annotations\n\n\n#### `autofill` method \nThe `autofill` method is used to extend hand written annotations by autofilled ones. \n\n##### Example:\n```js\nfunction(comment){\n  // Access the parsed comment here. \n}\n```\n\n> Note: Extended annotations can be disabled by using the `@allowExtend` annotation.\n\n\n#### `multiple` key\n\nThe `multiple` key is used to determine if this can be used mutliple times per comment.\n\n> Note: A warning will be emitted if a annotation is used more than once. Only the first value is used. \n\n## Development\n\nUse `mocha test` to run the unit tests.\n\n## Changelog\n\n\n#### 0.13.0\n\n  * Fix a bug where only in `multiple:false` case meta-information where included in `annotation.parse`.\n  * Include `id` passed to `parse` method in every `annotation.parse` call.\n\n#### 0.12.2\n \n  * Fix a bug where poster comments could be deteced inside strings.\n\n#### 0.12.1\n \n  * Unify platform specify line breaks (like `\\r\\n`) to `\\n` before processing\n\n#### 0.12.0\n \n  * Add the options `lineComment` and `blockComment` as boolean states to disbale parsing of either of them.\n\n#### 0.11.0\n\n  * Add the ability to pass in a `id` string to the `parse` function. Used for error reporting.\n\n#### 0.10.0\n\n  * return a flat array of comments. \n  * added `indexBy` and `indexByType` to restore the previous behaviour. \n\n#### 0.9.1\n\n  * Prevent negative indexes. (See [PR#10](https://github.com/FWeinb/CDocParser/pull/10)) \n  * Unify error messages. \n\n#### 0.9.0\n\n  * Include `commentRange` in object returned by the annotation parser.\n\n#### 0.8.1\n\n  * Fix regression in `lineNumberFor` reporting wrong line numbers. \n\n#### 0.8.0\n\n  * Add the ability to specify `lineCommentStyle` and `blockCommentStyle`. (See [PR#8](https://github.com/FWeinb/CDocParser/pull/8))\n\n#### 0.7.0\n\n  * Extend `type` key of each comment to differentiate between `line` and `block`. \n\n#### 0.6.0\n  \n  * Include line numbers in each found comment block. (See [PR#6](https://github.com/FWeinb/CDocParser/pull/5))\n\n#### 0.5.0\n\n * Add `multiple` key, to indicate if a annotation can be used more than once per comment.\n\n#### 0.4.0\n  \n  * Add `autofill` as an annotation feature.\n  * Remove the array wrapping of `default` values. \n\n#### 0.3.8\n \n  * Add type check for poster comments\n\n#### 0.3.7\n\n * Fix broken API in `0.3.5` and `0.3.6`\n\n#### 0.3.5\n\n * Use raw arrays returned from `default` as value.\n\n#### 0.3.4\n\n * Pass in the parsed item to the `default` function\n\n#### 0.3.3\n\n * Fix a bug with line comments that are indented\n\n#### 0.3.2\n\n * Add `allowedOn` key to annotations to only apply them to comments from a specific type\n\n#### 0.3.0\n\n * Add support for `///` comments\n * Add a `lineNumberFor` function as a second parameter that will convert char indices to line numbers\n\n#### 0.2.2\n\n  * Add a `poster comment` to apply annotations to all items in the file that are documented.\n  * Emits a `warning` if you use more than on `poster comment` per file. Only the first one will be used.\n\n#### 0.2.1\n \n  * Emits a `warning` if a annotation was not found instead of throwing an exception.\n\n#### 0.2.0 \n \n  * Throw an error if annotation was not found\n\n#### 0.1.1\n  \n  * Ignore annotations that return `undefined`.\n\n#### 0.1.0 \n  \n  * Restructure annotation function. Add `default` value and `parse` function.\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/FWeinb/CDocParser/issues"
  },
  "_id": "cdocparser@0.13.0",
  "_from": "cdocparser@^0.13.0"
}
