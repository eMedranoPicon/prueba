{
  "name": "safe-wipe",
  "version": "0.2.4",
  "homepage": "https://github.com/themeleon/safe-wipe",
  "bugs": {
    "url": "https://github.com/themeleon/safe-wipe/issues"
  },
  "license": "Unlicense",
  "contributors": [
    {
      "name": "Pascal Duez",
      "url": "https://github.com/pascalduez"
    },
    {
      "name": "ValÃ©rian Galliat",
      "url": "http://val.codejam.info/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/themeleon/safe-wipe.git"
  },
  "scripts": {
    "test": "eslint index.js"
  },
  "dependencies": {
    "extend": "2.*",
    "q": "1.*",
    "rimraf": "2.*"
  },
  "devDependencies": {
    "eslint": "0.*"
  },
  "readme": "# safe-wipe [![npm version](http://img.shields.io/npm/v/safe-wipe.svg?style=flat-square)](https://www.npmjs.org/package/safe-wipe)\n\n> Safely wipe a folder.\n\nOverview\n--------\n\nThis is the perfect library for when you want to wipe a folder with\nuser's confirmation.\n\n* If the folder is empty (or contains only useless files like\n  `.DS_Store` or `Thumbs.db` as configured with `config.ignore`), the\n  folder will be removed without asking anything.\n* If `config.force` is set to `true`, wipe anyway.\n* If the session is not interactive, raise an exception.\n* Prompt the user for confirmation, and raise an exception if the answer\n  is negative.\n\nYou can configure the following variables:\n\n| Name                        | Description                                                                                                                                            | Default                     |\n|-----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|\n| `stdin`, `stdout`, `stderr` | Streams to use for I/O.                                                                                                                                | `process.*` streams         |\n| `ignore`                    | An array of files to ignore when checking if a directory is empty.                                                                                     | `.DS_Store` and `Thumbs.db` |\n| `parent`                    | A (supposed) parent directory of the directory to wipe. If the parent is contained in the directory to wipe, the process will be aborted in all cases. |                             |\n| `interactive`               | Whether the session is interactive.                                                                                                                    | `true`                      |\n| `force`                     | Whether to force the wipe if the folder is not empty.                                                                                                  | `false`                     |\n| `silent`                    | The error messages are not printed if this is set to `true`.                                                                                          | `false`                     |\n| `messages`                  | An object of messages for user prompt and error display.                                                                                               |                             |\n\nThe messages are:\n\n| Name        | Description                                                                         |\n|-------------|-------------------------------------------------------------------------------------|\n| `contained` | Error message when the folder to wipe is contained in the configured parent folder. |\n| `confirm`   | Text to prompt the user to confirm the (not empty) directory wipe.                  |\n| `abort`     | Error message when the user refuses to wipe the folder.                             |\n\nThe function is asynchronous and return a promise. Nothing is passed to\nthe success function, but you'll get an `Error` instance in the error\nfunction. It can have the following `code` property:\n\n| Code        | Description                                                                                            |\n|-------------|--------------------------------------------------------------------------------------------------------|\n| `CONTAINED` | Refused to remove the directory since it's containing the supposed parent.                             |\n| `ABORT`     | The user aborted the operation (or we're not in an interactive session and `config.force` is `false`). |\n\nExamples\n--------\n\n### Simple usage\n\n```js\nvar safeWipe = require('safe-wipe');\n\nsafeWipe('directory', {\n  parent: __dirname,\n  messages: {\n    abort: 'Nope.',\n  },\n}).then(function () {\n  console.log('Successfully removed!');\n}, function (e) {\n  console.error(e.message, e.code);\n});\n```\n\n### Bind a config object\n\n```js\nvar mySafeWipe = safeWipe({\n  interactive: false,\n});\n\nmySafeWipe('some-directory').then(function () {\n  // ...\n});\n\nmySafeWipe('another-directory', {\n  force: true,\n});\n```\n",
  "readmeFilename": "README.md",
  "description": "> Safely wipe a folder.",
  "_id": "safe-wipe@0.2.4",
  "_from": "safe-wipe@0.*"
}
